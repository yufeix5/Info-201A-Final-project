runApp('~/Desktop/info201/coding/a7--yufeix5')
runApp('~/Desktop/info201/coding/a7--yufeix5')
library("jsonlite")
library("httr")
library("dplyr")
library("magrittr")
source("api-key.R")
default_chamber <- "house"
default_state <- "WA"
# Getting the data frame containing everything but age
base_url <- "https://api.propublica.org"
endpoint <- "/congress/v1/"
resource_url <- paste0(base_url, endpoint, "116/house/members.json")
response <- GET(resource_url, add_headers("X-API-Key" = propublica_key))
response_text <- content(response, "text")
response_data <- fromJSON(response_text)
df <- response_data$results$members[[1]]
# Getting the data frame by parameters chamber and state
df_select <- function(chamber, state) {
base <- "https://api.propublica.org/congress/v1/members/"
url <- paste0(base, chamber, "/", state, "/current.json")
response <- GET(url, add_headers("X-API-Key" = propublica_key))
response_text <- content(response, "text")
data <- fromJSON(response_text)
df_result <- data$results
return(df_result)
}
# info of representatives
info_of_representative <- function(id) {
base_url <- "https://api.propublica.org"
representative_end_point <- paste0("/congress/v1/members/", id, ".json")
resource_uri <- paste0(base_url, representative_end_point)
representative_response <- GET(
resource_uri,
add_headers("X-API-Key" = propublica_key)
)
representative_content <- content(representative_response, "text") %>% fromJSON()
return(representative_content$results)
}
# Getting age
get_df <- function(input_chamber, input_state) {
id_list <- df_select(input_chamber, input_state) %>%
select(id) %>%
list()
ls_age <- lapply(id_list[[1]]$id, info_of_representative)
df_info <- df_select(input_chamber, input_state)
df_age <- bind_rows(ls_age)
df_with_age <- bind_cols(df_info, df_age)
#  today <- as.Date(Sys.Date(), format = "%d/%m/%y")
#  df_result <- df_with_age %>%
#    mutate(age = as.integer(((today - as.Date(date_of_birth)) / 365))) %>%
#    select(first_name, last_name, gender, date_of_birth, twitter_account, facebook_account,
#           age)
return(df_with_age)
}
df_result <- function(input_chamber, input_state) {
today <- as.Date(Sys.Date(), format = "%d/%m/%y")
data <- get_df(input_chamber, input_state) %>%
mutate(age = as.integer(((today - as.Date(date_of_birth)) / 365))) %>%
select(first_name, last_name, gender, date_of_birth, twitter_account, facebook_account, age)
return(data)
}
# getting list of states
list_state <- unique(df$state)
# getting detailed information
get_info <- function(input_chamber, input_state) {
id_list <- df_select(input_chamber, input_state) %>%
select(id) %>%
list()
ls_age <- lapply(id_list[[1]]$id, info_of_representative)
df_info <- df_select(input_chamber, input_state)
df_age <- bind_rows(ls_age) %>%
select(member_id, url, current_party, roles) %>%
unnest(cols = roles) %>%
filter(congress == "116") %>%
select(member_id, url, current_party, phone, office)
return(df_age)
}
df_test <- get_info(default_chamber, default_state)
runApp('~/Desktop/info201/coding/a7--yufeix5')
runApp('~/Desktop/info201/coding/a7--yufeix5')
runApp('~/Desktop/info201/coding/a7--yufeix5')
runApp('~/Desktop/info201/coding/a7--yufeix5')
runApp('~/Desktop/info201/coding/a7--yufeix5')
library("tidyr")
runApp('~/Desktop/info201/coding/a7--yufeix5')
runApp('~/Desktop/info201/coding/a7--yufeix5')
runApp('~/Desktop/info201/coding/a7--yufeix5')
runApp('~/Desktop/info201/coding/a7--yufeix5')
runApp('~/Desktop/info201/coding/a7--yufeix5')
runApp('~/Desktop/info201/coding/a7--yufeix5')
myData_test <- get_df(default_chamber, default_state) %>%
group_by(gender)
View(myData_test)
myData_test <- get_df(default_chamber, default_state) %>%
group_by(gender)
myData_test <- get_df(default_chamber, default_state) %>%
group_by(gender) %>%
summarise(gender_count = n())
View(myData_test)
runApp('~/Desktop/info201/coding/a7--yufeix5')
runApp('~/Desktop/info201/coding/a7--yufeix5')
runApp('~/Desktop/info201/coding/a7--yufeix5')
runApp('~/Desktop/info201/coding/a7--yufeix5')
runApp('~/Desktop/info201/coding/a7--yufeix5')
runApp('~/Desktop/info201/coding/a7--yufeix5')
myData_test <- get_df(default_chamber, default_state) %>%
group_by(party) %>%
summarise(party_count = n())
View(myData_test)
runApp('~/Desktop/info201/coding/a7--yufeix5')
runApp('~/Desktop/info201/coding/a7--yufeix5')
runApp('~/Desktop/info201/coding/a7--yufeix5')
runApp('~/Desktop/info201/coding/a7--yufeix5')
df_test <- get_info(default_chamber, default_state)
View(df_test)
df_test <- get_info(default_chamber, default_state)
View(df_test)
df_test <- get_df(default_chamber, default_state)
View(df_test)
df_detail <- function(input_chamber, input_state) {
today <- as.Date(Sys.Date(), format = "%d/%m/%y")
data <- get_df(input_chamber, input_state) %>%
mutate(age = as.integer(((today - as.Date(date_of_birth)) / 365))) %>%
select(first_name, last_name, gender, date_of_birth,
twitter_account, facebook_account, age, roles) %>%
unnest(cols = roles) %>%
#   filter(congress == "116") %>%
select(irst_name, last_name, gender, date_of_birth,
twitter_account, facebook_account, age, url,
current_party, phone, office)
return(data)
}
df_test <- df_detail(default_chamber, default_state)
View(df_test)
df_test <- df_detail(default_chamber, default_state)
df_detail <- function(input_chamber, input_state) {
today <- as.Date(Sys.Date(), format = "%d/%m/%y")
data <- get_df(input_chamber, input_state) %>%
mutate(age = as.integer(((today - as.Date(date_of_birth)) / 365))) %>%
select(first_name, last_name, gender, date_of_birth,
twitter_account, facebook_account, age, roles) %>%
unnest(cols = roles) %>%
#   filter(congress == "116") %>%
select(first_name, last_name, gender, date_of_birth,
twitter_account, facebook_account, age, url,
current_party, phone, office)
return(data)
}
df_test <- df_detail(default_chamber, default_state)
df_detail <- function(input_chamber, input_state) {
today <- as.Date(Sys.Date(), format = "%d/%m/%y")
data <- get_df(input_chamber, input_state) %>%
mutate(age = as.integer(((today - as.Date(date_of_birth)) / 365))) %>%
select(first_name, last_name, gender, date_of_birth,
twitter_account, facebook_account, age, roles) %>%
unnest(cols = roles) %>%
#   filter(congress == "116") %>%
select(first_name, last_name, gender, date_of_birth,
twitter_account, facebook_account, age, url,
current_party, phone, office)
return(data)
}
View(df_test)
df_detail <- function(input_chamber, input_state) {
today <- as.Date(Sys.Date(), format = "%d/%m/%y")
data <- get_df(input_chamber, input_state) %>%
mutate(age = as.integer(((today - as.Date(date_of_birth)) / 365))) %>%
select(first_name, last_name, gender, date_of_birth,
twitter_account, facebook_account, age, roles) %>%
unnest(cols = roles) %>%
#   filter(congress == "116") %>%
select(first_name, last_name, gender, date_of_birth,
twitter_account, facebook_account, age, url,
current_party, phone, office)
return(data)
}
df_test <- df_detail(default_chamber, default_state)
df_test <- df_detail(default_chamber, default_state)
df_detail <- function(input_chamber, input_state) {
today <- as.Date(Sys.Date(), format = "%d/%m/%y")
data <- get_df(input_chamber, input_state) %>%
mutate(age = as.integer(((today - as.Date(date_of_birth)) / 365))) %>%
select(first_name, last_name, gender, date_of_birth,
twitter_account, facebook_account, age, roles) %>%
unnest(cols = roles) %>%
#   filter(congress == "116") %>%
select(first_name, last_name, gender, date_of_birth,
twitter_account, facebook_account, age, url,
party, phone, office)
return(data)
}
View(df_test)
View(df_test)
df_detail <- function(input_chamber, input_state) {
today <- as.Date(Sys.Date(), format = "%d/%m/%y")
data <- get_df(input_chamber, input_state) %>%
mutate(age = as.integer(((today - as.Date(date_of_birth)) / 365))) %>%
select(first_name, last_name, gender, date_of_birth,
twitter_account, facebook_account, age, roles) %>%
unnest(cols = roles) %>%
#   filter(congress == "116") %>%
select(first_name, last_name, gender, date_of_birth,
twitter_account, facebook_account, age, url,
party, phone, office)
return(data)
}
View(df_test)
df_detail <- function(input_chamber, input_state) {
today <- as.Date(Sys.Date(), format = "%d/%m/%y")
data <- get_df(input_chamber, input_state) %>%
mutate(age = as.integer(((today - as.Date(date_of_birth)) / 365))) %>%
select(first_name, last_name, gender, date_of_birth,
twitter_account, facebook_account, age, roles) %>%
unnest(cols = roles)
#   filter(congress == "116") %>%
return(data)
}
# getting list of states
list_state <- unique(df$state)
View(df_test)
df_detail <- function(input_chamber, input_state) {
data <- rbind(get_info(input_chamber, input_state),
df_result(input_chamber, input_state))
return(data)
}
df_test <- df_detail(default_chamber, default_state)
df_detail <- function(input_chamber, input_state) {
data <- rbind(get_info(input_chamber, input_state),
df_result(input_chamber, input_state))
return(data)
}
test2 <- get_info(default_chamber, default_state)
View(test2)
df_test <- df_result(default_chamber, default_state)
View(df_test)
df_test <- df_result(default_chamber, default_state)
df_detail <- function(input_chamber, input_state) {
data <- rbind(get_info(input_chamber, input_state),
df_result(input_chamber, input_state))
return(data)
}
df_test <- df_detail(default_chamber, default_state)
df_test3 <- df_detail(default_chamber, default_state)
df_result <- function(input_chamber, input_state) {
today <- as.Date(Sys.Date(), format = "%d/%m/%y")
data <- get_df(input_chamber, input_state) %>%
mutate(age = as.integer(((today - as.Date(date_of_birth)) / 365))) %>%
select(member_id, first_name, last_name, gender, date_of_birth,
twitter_account, facebook_account, age)
return(data)
}
test <- df_result(default_chamber, default_state)
View(test)
df_test3 <- df_detail(default_chamber, default_state)
test <- df_result(default_chamber, default_state)
df_test3 <- df_detail(default_chamber, default_state)
df_detail <- function(input_chamber, input_state) {
data <- merge(get_info(input_chamber, input_state),
df_result(input_chamber, input_state), by = "member_id")
return(data)
}
test <- df_result(default_chamber, default_state)
df_test3 <- df_detail(default_chamber, default_state)
View(df_test3)
runApp('~/Desktop/info201/coding/a7--yufeix5')
runApp()
runApp()
runApp('~/Desktop/info201/coding/a7--yufeix5')
runApp('~/Desktop/info201/coding/a7--yufeix5')
runApp()
runApp('~/Desktop/info201/coding/a7--yufeix5')
runApp()
runApp()
runApp('~/Desktop/info201/coding/a7--yufeix5')
runApp()
runApp('~/Desktop/info201/coding/a7--yufeix5')
runApp()
setwd("~/Desktop/info201/coding/Info-201A-Final-project")
library("jsonlite")
library("httr")
library("dplyr")
library("magrittr")
source("api-key.R")
library("tidyr")
default_chamber <- "house"
default_state <- "WA"
# Getting the data frame containing everything but age
base_url <- "https://api.propublica.org"
endpoint <- "/congress/v1/"
resource_url <- paste0(base_url, endpoint, "116/house/members.json")
response <- GET(resource_url, add_headers("X-API-Key" = propublica_key))
response_text <- content(response, "text")
response_data <- fromJSON(response_text)
df <- response_data$results$members[[1]]
# Getting the data frame by parameters chamber and state
df_select <- function(chamber, state) {
base <- "https://api.propublica.org/congress/v1/members/"
url <- paste0(base, chamber, "/", state, "/current.json")
response <- GET(url, add_headers("X-API-Key" = propublica_key))
response_text <- content(response, "text")
data <- fromJSON(response_text)
df_result <- data$results
return(df_result)
}
# info of representatives
info_of_representative <- function(id) {
base_url <- "https://api.propublica.org"
representative_end_point <- paste0("/congress/v1/members/", id, ".json")
resource_uri <- paste0(base_url, representative_end_point)
representative_response <- GET(
resource_uri,
add_headers("X-API-Key" = propublica_key)
)
representative_content <- content(representative_response, "text") %>% fromJSON()
return(representative_content$results)
}
# Getting age
get_df <- function(input_chamber, input_state) {
id_list <- df_select(input_chamber, input_state) %>%
select(id) %>%
list()
ls_age <- lapply(id_list[[1]]$id, info_of_representative)
df_info <- df_select(input_chamber, input_state)
df_age <- bind_rows(ls_age)
df_with_age <- bind_cols(df_info, df_age)
#  today <- as.Date(Sys.Date(), format = "%d/%m/%y")
#  df_result <- df_with_age %>%
#    mutate(age = as.integer(((today - as.Date(date_of_birth)) / 365))) %>%
#    select(first_name, last_name, gender, date_of_birth, twitter_account, facebook_account,
#           age)
return(df_with_age)
}
df_result <- function(input_chamber, input_state) {
today <- as.Date(Sys.Date(), format = "%d/%m/%y")
data <- get_df(input_chamber, input_state) %>%
mutate(age = as.integer(((today - as.Date(date_of_birth)) / 365))) %>%
select(member_id, first_name, last_name, gender, date_of_birth,
twitter_account, facebook_account, age)
return(data)
}
#test <- df_result(default_chamber, default_state)
#df_test3 <- df_detail(default_chamber, default_state)
df_detail <- function(input_chamber, input_state) {
data <- merge(get_info(input_chamber, input_state),
df_result(input_chamber, input_state), by = "member_id")
return(data)
}
# getting list of states
list_state <- unique(df$state)
# getting detailed information我不会写啊啊啊啊啊
get_info <- function(input_chamber, input_state) {
id_list <- df_select(input_chamber, input_state) %>%
select(id) %>%
list()
ls_age <- lapply(id_list[[1]]$id, info_of_representative)
df_info <- df_select(input_chamber, input_state)
df_age <- bind_rows(ls_age) %>%
select(member_id, url, current_party, roles) %>%
unnest(cols = roles) %>%
filter(congress == "116") %>%
select(member_id, url, current_party, phone, office)
return(df_age)
}
# getting bar plot data
myData_test <- get_df(default_chamber, default_state) %>%
group_by(party) %>%
summarise(party_count = n())
runApp('~/Desktop/info201/coding/a7--yufeix5')
library("jsonlite")
library("httr")
library("dplyr")
library("magrittr")
source("api-key.R")
library("tidyr")
default_chamber <- "house"
default_state <- "WA"
# Getting the data frame containing everything but age
base_url <- "https://api.propublica.org"
endpoint <- "/congress/v1/"
resource_url <- paste0(base_url, endpoint, "116/house/members.json")
response <- GET(resource_url, add_headers("X-API-Key" = propublica_key))
response_text <- content(response, "text")
response_data <- fromJSON(response_text)
df <- response_data$results$members[[1]]
# Getting the data frame by parameters chamber and state
df_select <- function(chamber, state) {
base <- "https://api.propublica.org/congress/v1/members/"
url <- paste0(base, chamber, "/", state, "/current.json")
response <- GET(url, add_headers("X-API-Key" = propublica_key))
response_text <- content(response, "text")
data <- fromJSON(response_text)
df_result <- data$results
return(df_result)
}
# info of representatives
info_of_representative <- function(id) {
base_url <- "https://api.propublica.org"
representative_end_point <- paste0("/congress/v1/members/", id, ".json")
resource_uri <- paste0(base_url, representative_end_point)
representative_response <- GET(
resource_uri,
add_headers("X-API-Key" = propublica_key)
)
representative_content <- content(representative_response, "text") %>% fromJSON()
return(representative_content$results)
}
# Getting age
get_df <- function(input_chamber, input_state) {
id_list <- df_select(input_chamber, input_state) %>%
select(id) %>%
list()
ls_age <- lapply(id_list[[1]]$id, info_of_representative)
df_info <- df_select(input_chamber, input_state)
df_age <- bind_rows(ls_age)
df_with_age <- bind_cols(df_info, df_age)
#  today <- as.Date(Sys.Date(), format = "%d/%m/%y")
#  df_result <- df_with_age %>%
#    mutate(age = as.integer(((today - as.Date(date_of_birth)) / 365))) %>%
#    select(first_name, last_name, gender, date_of_birth, twitter_account, facebook_account,
#           age)
return(df_with_age)
}
df_result <- function(input_chamber, input_state) {
today <- as.Date(Sys.Date(), format = "%d/%m/%y")
data <- get_df(input_chamber, input_state) %>%
mutate(age = as.integer(((today - as.Date(date_of_birth)) / 365))) %>%
select(member_id, first_name, last_name, gender, date_of_birth,
twitter_account, facebook_account, age)
return(data)
}
#test <- df_result(default_chamber, default_state)
#df_test3 <- df_detail(default_chamber, default_state)
df_detail <- function(input_chamber, input_state) {
data <- merge(get_info(input_chamber, input_state),
df_result(input_chamber, input_state), by = "member_id")
return(data)
}
# getting list of states
list_state <- unique(df$state)
# getting detailed information我不会写啊啊啊啊啊
get_info <- function(input_chamber, input_state) {
id_list <- df_select(input_chamber, input_state) %>%
select(id) %>%
list()
ls_age <- lapply(id_list[[1]]$id, info_of_representative)
df_info <- df_select(input_chamber, input_state)
df_age <- bind_rows(ls_age) %>%
select(member_id, url, current_party, roles) %>%
unnest(cols = roles) %>%
filter(congress == "116") %>%
select(member_id, url, current_party, phone, office)
return(df_age)
}
# getting bar plot data
myData_test <- get_df(default_chamber, default_state) %>%
group_by(party) %>%
summarise(party_count = n())
library("jsonlite")
library("httr")
library("dplyr")
library("magrittr")
source("api-key.R")
library("tidyr")
default_chamber <- "house"
default_state <- "WA"
default_chamber <- "house"
default_state <- "WA"
# Getting the data frame containing everything but age
base_url <- "https://api.propublica.org"
endpoint <- "/congress/v1/"
resource_url <- paste0(base_url, endpoint, "116/house/members.json")
library("magrittr")
source("api-key.R")
library("tidyr")
default_chamber <- "house"
default_state <- "WA"
# Getting the data frame containing everything but age
base_url <- "https://api.propublica.org"
endpoint <- "/congress/v1/"
resource_url <- paste0(base_url, endpoint, "116/house/members.json")
response <- GET(resource_url, add_headers("X-API-Key" = propublica_key))
response_text <- content(response, "text")
response_data <- fromJSON(response_text)
df <- response_data$results$members[[1]]
source("api-key.R")
source("api-key.R")
setwd("~/Desktop/info201/coding/Info-201A-Final-project")
library("jsonlite")
library("httr")
library("dplyr")
library("magrittr")
source("api-key.R")
library("tidyr")
library("jsonlite")
library("httr")
library("dplyr")
library("magrittr")
source("api-key.R")
library("tidyr")
library("jsonlite")
library("httr")
library("dplyr")
library("magrittr")
source("api-key.R")
library("tidyr")
library("jsonlite")
library("httr")
library("dplyr")
library("magrittr")
source("api-key.R")
library("tidyr")
