henderson <- yelp %>%
filter(city == "Henderson") %>%
group_by(Price_Range) %>%
summarize(num_each_price = n())
filtered_henderson <- na.omit(henderson)
# The associated data frames of the price ranges
only_ones <- data.frame(c(
filtered_las_vegas$num_each_price[1],
filtered_north_las_vegas$num_each_price[1],
filtered_henderson$num_each_price[1]
))
only_twos <- data.frame(c(
filtered_las_vegas$num_each_price[2],
filtered_north_las_vegas$num_each_price[2],
filtered_henderson$num_each_price[2]
))
only_threes <- data.frame(c(
filtered_las_vegas$num_each_price[3],
filtered_north_las_vegas$num_each_price[3],
filtered_henderson$num_each_price[3]
))
only_fours <- data.frame(c(
filtered_las_vegas$num_each_price[4],
filtered_north_las_vegas$num_each_price[4],
filtered_henderson$num_each_price[4]
))
# The cities and associated price ranges together in a data frame
cities <- data.frame(c("Las Vegas", "North Las Vegas", "Henderson"))
city_df <- data.frame(cities, only_ones, only_twos, only_threes, only_fours)
colnames(city_df) <- c(
"city", "$ = Under $10", "$$ = $11-30",
"$$$ = $31- 60", "$$$$ = Over $61"
)
my_server <- function(input, output) {
output$bar <- renderPlotly({
# Filters down to a specific city
one_city <- city_df %>%
filter(city == input$City)
# State is not needed as part of the data frame
no_city <- one_city %>%
select(-city)
# Organizes the data frame such that it is race vs pop
price_total <- gather(
no_city,
key = prices,
value = total
)
one_city_bar_chart <- plot_ly(price_total,
x = ~prices, y = ~total,
color = I(input$Color), type = "bar",
hoverinfo = "text",
text = ~ paste(paste("Price Range:", prices),
paste(
"Number of Businesses:",
total
),
sep = "<br />"
)
) %>%
layout(
title = "Number of Businesses in Each Price Range",
xaxis = list(title = "Price Range"),
yaxis = list(title = "Number of Businesses"),
showlegend = FALSE
)
return(one_city_bar_chart)
})
# Render function for the check-ins and reviews page
output$reviews_scatterplot <- renderPlotly({
# Filter data for Las Vegas, and filter to only use the selected number of
# stars according to the widget
vegas <- yelp %>%
filter(city == "Las Vegas") %>%
select(name, review_count, Number_of_Checkins, stars) %>%
filter(stars == input$stars)
scatter <- plot_ly(vegas,
x = ~Number_of_Checkins, y = ~review_count,
type = "scatter",
mode = "markers",
hoverinfo = "text",
text = ~ paste(
"</br> Restaurant: ", name,
"</br> Number of Check-Ins: ", Number_of_Checkins,
"</br> Number of Reviews: ", review_count
)
)
scatter <- scatter %>%
layout(
title = "Correlation Between Check-Ins and Reviews",
showlegend = FALSE
)
if (input$scale) {
scatter <- scatter %>%
layout(
xaxis = list(title = "Number of Check-Ins"),
yaxis = list(title = "Review Count")
)
} else {
scatter <- scatter %>%
layout(
xaxis = list(title = "Number of Check-Ins", range = c(0, 20000)),
yaxis = list(title = "Review Count", range = c(0, 6000))
)
}
fit <- lm(review_count ~ Number_of_Checkins, data = vegas)
# Display regressions if specified by widget
if (input$lines) {
scatter <- scatter %>% add_lines(
x = ~Number_of_Checkins,
y = fitted(fit)
)
}
scatter
})
output$equation <- renderText({
if (input$lines) {
vegas <- yelp %>%
filter(city == "Las Vegas") %>%
select(review_count, Number_of_Checkins, stars) %>%
filter(stars == input$stars)
linear_mod <- lm(review_count ~ Number_of_Checkins, data = vegas)
paste0(
"Reviews = ",
format(round(coef(linear_mod)["(Intercept)"], 2), nsmall = 2),
" + ",
format(round(coef(linear_mod)["Number_of_Checkins"], 2),
nsmall = 2
),
" x Check-Ins"
)
}
})
output$rsquared <- renderText({
if (input$lines) {
vegas <- yelp %>%
filter(city == "Las Vegas") %>%
select(review_count, Number_of_Checkins, stars) %>%
filter(stars == input$stars)
linear_mod <- lm(review_count ~ Number_of_Checkins, data = vegas)
paste0(
"R-squared: ",
format(round(summary(linear_mod)$r.squared, 2), nsmall = 2)
)
}
})
output$ratings_map <- renderLeaflet({
vegas <- yelp %>%
filter(city == "Las Vegas" & review_count > 10) %>%
select(latitude, longitude, stars, Number_of_Checkins, name)
if (!("1" %in% input$stars_group)) {
vegas <- vegas %>% filter(round(stars) != 1)
}
if (!("2" %in% input$stars_group)) {
vegas <- vegas %>% filter(round(stars) != 2)
}
if (!("3" %in% input$stars_group)) {
vegas <- vegas %>% filter(round(stars) != 3)
}
if (!("4" %in% input$stars_group)) {
vegas <- vegas %>% filter(round(stars) != 4)
}
if (!("5" %in% input$stars_group)) {
vegas <- vegas %>% filter(round(stars) != 5)
}
stars_rounded <- vegas$stars %>%
round()
palette_fn <- colorFactor(palette = "Set1", domain = stars_rounded)
map_of_vegas <- leaflet(data = vegas) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -115.1767, lat = 36.11, zoom = 10.5) %>%
addCircles(
lat = ~ vegas$latitude,
lng = ~ vegas$longitude,
color = ~ palette_fn(stars_rounded),
radius = 20,
fillOpacity = 0.5
) %>%
addLegend(
position = "bottomright",
title = "Star Ratings in Las Vegas",
pal = palette_fn, # the palette to label
values = ~stars_rounded, # the values to label
opacity = 1
)
map_of_vegas
})
}
View(shooting)
proj_server <- function(input, output) {
graph_one <- select(df, neighbourhood_group, room_type)
data <-table(graph_one$neighbourhood_group, graph_one$room_type)
barplot(data, beside=TRUE)
p <- ggplot(data = graph_one, aes(x=neighbourhood_group,
y=room_type,
fill = room_type))
p + geom_bar(stat = "identity")
proj_server <- function(input, output) {
graph_one <- select(df, neighbourhood_group, room_type)
data <-table(graph_one$neighbourhood_group, graph_one$room_type)
barplot(data, beside=TRUE)
p <- ggplot(data = graph_one, aes(x=neighbourhood_group,
y=room_type,
fill = room_type))
p + geom_bar(stat = "identity")
proj_server <- function(input, output) {
graph_one <- select(df, neighbourhood_group, room_type)
data <-table(graph_one$neighbourhood_group, graph_one$room_type)
barplot(data, beside=TRUE)
p <- ggplot(data = graph_one, aes(x=neighbourhood_group,
y=room_type,
fill = room_type))
p + geom_bar(stat = "identity")
proj_server <- function(input, output) {
graph_one <- select(df, neighbourhood_group, room_type)
data <-table(graph_one$neighbourhood_group, graph_one$room_type)
barplot(data, beside=TRUE)
p <- ggplot(data = graph_one, aes(x=neighbourhood_group,
y=room_type,
fill = room_type))
p + geom_bar(stat = "identity")
library("dplyr")
library("plotly")
library("shiny")
source("app_ui.R")
roj_server <- function(input, output) {
graph_one <- select(df, neighbourhood_group, room_type)
data <-table(graph_one$neighbourhood_group, graph_one$room_type)
barplot(data, beside=TRUE)
p <- ggplot(data = graph_one, aes(x=neighbourhood_group,
y=room_type,
fill = room_type))
p + geom_bar(stat = "identity")
}
proj_server <- function(input, output) {
graph_one <- select(df, neighbourhood_group, room_type)
data <-table(graph_one$neighbourhood_group, graph_one$room_type)
barplot(data, beside=TRUE)
p <- ggplot(data = graph_one, aes(x=neighbourhood_group,
y=room_type,
fill = room_type))
p + geom_bar(stat = "identity")
}
graph_one <- select(df, neighbourhood_group, room_type)
data <-table(graph_one$neighbourhood_group, graph_one$room_type)
barplot(data, beside=TRUE)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
graph_one <- select(df, neighbourhood_group, room_type)
data <-table(graph_one$neighbourhood_group, graph_one$room_type)
barplot(data, beside=TRUE)
p <- ggplot(data = graph_one, aes(x=neighbourhood_group,
y=room_type,
fill = room_type))
p + geom_bar(stat = "identity")
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
graph_one <- select(df, neighbourhood_group, room_type)
data <-table(graph_one$neighbourhood_group, graph_one$room_type)
barplot(data, beside=TRUE)
p <- ggplot(data = graph_one, aes(x=neighbourhood_group,
y=room_type,
fill = room_type))
p + geom_bar(stat = "identity")
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
graph_one <- select(df, neighbourhood_group, room_type)
data <-table(graph_one$neighbourhood_group, graph_one$room_type)
barplot(data, beside=TRUE)
p <- ggplot(data = graph_one, aes(x=neighbourhood_group,
y=room_type,
fill = room_type))
p + geom_bar(stat = "identity")
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
graph_one <- select(df, neighbourhood_group, room_type)
data <-table(graph_one$neighbourhood_group, graph_one$room_type)
barplot(data, beside=TRUE)
p <- ggplot(data = graph_one, aes(x=neighbourhood_group,
y=room_type,
fill = room_type))
p + geom_bar(stat = "identity")
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
graph_one <- select(df, neighbourhood_group, room_type)
data <-table(graph_one$neighbourhood_group, graph_one$room_type)
barplot(data, beside=TRUE)
p <- ggplot(data = graph_one, aes(x=neighbourhood_group,
y=room_type,
fill = room_type))
p + geom_bar(stat = "identity")
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
graph_one <- select(df, neighbourhood_group, room_type)
data <-table(graph_one$neighbourhood_group, graph_one$room_type)
barplot(data, beside=TRUE)
p <- ggplot(data = graph_one, aes(x=neighbourhood_group,
y=room_type,
fill = room_type))
p + geom_bar(stat = "identity")
shiny::runApp('info201/coding/Info-201A-Final-project')
shiny::runApp('info201/coding/Info-201A-Final-project')
shiny::runApp('info201/coding/Info-201A-Final-project')
shiny::runApp('info201/coding/Info-201A-Final-project')
shiny::runApp('info201/coding/Info-201A-Final-project')
library("shiny")
library("lintr")
library("dplyr")
library("ggplot2")
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
# Data wrangling space #
# For Map
unique_neighborhood <- unique(df$neighbourhood_group)
unique_type <- unique(df$room_type)
bar_data <- table(df$neighbourhood_group, df$room_type)
rbind(bar_data)
# Shiny User Interface #
proj_ui <- navbarPage(
tabPanel(
"Introduction"
),
tabPanel(
"Comparing Different Room Types in Neighborhood",
sidebarLayout(
sidebarPanel(
selectInput(
"room type",
label = "Choose a type",
choices = unique_neighborhood,
selected = "Private room"
)
),
mainPanel(
plotOutput("bar_plot")
)
),
p("What we can learn from this data:"),
tags$ul(
tags$li("......"),
tags$li(".......")
)
)
)
shiny::runApp('info201/coding/Info-201A-Final-project')
reactive_data = reactive({
selected_type = input$TYPE
return(df[df$room_type==selected_type,])
})
reactive_data = reactive({
selected_type = input$TYPE
return(df[df$room_type==selected_type,])
})
reactive_data = reactive({
selected_type = input$TYPE
return(df[df$room_type==selected_type,])
})
reactive_data = reactive({
selected_type = input$TYPE
return(df[df$room_type==selected_type,])
})
proj_server <- function(input, output) {
reactive_data = reactive({
selected_type = input$TYPE
return(df[df$room_type==selected_type,])
})
output$bar_plot <- renderPlot({
ggplot(data = reactive_data(), aes(x = neighbourhood_group,
y=room_type,
fill = room_type))
p + geom_bar(stat = "identity")
})
}
ggplot(data = reactive_data(), aes(x = neighbourhood_group,
y=room_type,
fill = room_type))
ggplot(data = reactive_data(), aes(x = neighbourhood_group,
y=room_type,
fill = room_type))
shiny::runApp('info201/coding/Info-201A-Final-project')
reactive_data = reactive({
selected_type = input$TYPE
return(df[df$room_type==selected_type,])
})
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
library("shiny")
library("lintr")
library("dplyr")
library("ggplot2")
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
setwd("~/Desktop/info201/coding/Info-201A-Final-project")
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
source('~/Desktop/info201/coding/Info-201A-Final-project/app_ui.R')
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
library(shiny); runApp('info201/coding/Info-201A-Final-project/proj_app.R')
View(df)
setwd("~/Desktop/info201/coding/Info-201A-Final-project")
library("dplyr")
library("plotly")
library("shiny")
library("tidyr")
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
# The price ranges for Brooklyn
Brooklyn <- df %>%
filter(neighbourhood_group == "Brooklyn") %>%
group_by(room_type) %>%
summarize(num_each_type = n())
filtered_Brooklyn <- na.omit(Brooklyn)
Manhattan <- df %>%
filter(neighbourhood_group == "Manhattan") %>%
group_by(room_type) %>%
summarize(num_each_type = n())
filtered_Manhattan <- na.omit(Manhattan)
Queens <- df %>%
filter(neighbourhood_group == "Queens") %>%
group_by(room_type) %>%
summarize(num_each_type = n())
filtered_Queens <- na.omit(Queens)
Bronx <- df %>%
filter(neighbourhood_group == "Bronx") %>%
group_by(room_type) %>%
summarize(num_each_type = n())
filtered_Bronx <- na.omit(Bronx)
Staten_Island <- df %>%
filter(neighbourhood_group == "Staten Island") %>%
group_by(room_type) %>%
summarize(num_each_type = n())
filtered_Staten_Island <- na.omit(Staten_Island)
# The associated data frames of the room type
type_entire <- data.frame(c(
filtered_Brooklyn$num_each_type[1],
filtered_Queens$num_each_type[1],
filtered_Manhattan$num_each_type[1],
filtered_Bronx$num_each_type[1],
filtered_Staten_Island$num_each_type[1]
))
type_private <- data.frame(c(
filtered_Brooklyn$num_each_type[2],
filtered_Queens$num_each_type[2],
filtered_Manhattan$num_each_type[2],
filtered_Bronx$num_each_type[2],
filtered_Staten_Island$num_each_type[2]
))
type_shared <- data.frame(c(
filtered_Brooklyn$num_each_type[3],
filtered_Queens$num_each_type[3],
filtered_Manhattan$num_each_type[3],
filtered_Bronx$num_each_type[3],
filtered_Staten_Island$num_each_type[3]
))
# The neighborhood and associated room type together in a data frame
neighborhoods <- data.frame(unique(df$neighbourhood_group))
neighborhood_df <- data.frame(neighborhoods,
type_entire, type_private, type_shared)
colnames(neighborhood_df) <- c(
"neighborhood", "Entire house/apt", "Private room", "Shared room"
)
# dataframe for pie chart
neighborhood_df$total = rowSums(neighborhood_df[ ,
c("Entire house/apt","Private room", "Shared room")], na.rm = T)
p <- ggplot(neighborhood_df,aes(x='',y=total,fill=neighborhood)) +
geom_bar(stat="identity", color = "black")
p <- p + coord_polar(theta='y')+ theme(axis.ticks=element_blank(),
axis.text.y=element_blank(),
axis.text.x=element_text(colour='black'),
axis.title=element_blank())
p <- p + scale_y_continuous(breaks = cumsum(neighborhood_df$total) - neighborhood_df$total / 2,
labels = neighborhood_df$neighborhood)
p
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
lintr:::addin_lint()
library("lintr")
library("lintr")
library("lintr")
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
runApp()
runApp()
runApp()
runApp()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
runApp()
runApp()
runApp()
