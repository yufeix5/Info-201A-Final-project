if (input$lines) {
vegas <- yelp %>%
filter(city == "Las Vegas") %>%
select(review_count, Number_of_Checkins, stars) %>%
filter(stars == input$stars)
linear_mod <- lm(review_count ~ Number_of_Checkins, data = vegas)
paste0(
"R-squared: ",
format(round(summary(linear_mod)$r.squared, 2), nsmall = 2)
)
}
})
output$ratings_map <- renderLeaflet({
vegas <- yelp %>%
filter(city == "Las Vegas" & review_count > 10) %>%
select(latitude, longitude, stars, Number_of_Checkins, name)
if (!("1" %in% input$stars_group)) {
vegas <- vegas %>% filter(round(stars) != 1)
}
if (!("2" %in% input$stars_group)) {
vegas <- vegas %>% filter(round(stars) != 2)
}
if (!("3" %in% input$stars_group)) {
vegas <- vegas %>% filter(round(stars) != 3)
}
if (!("4" %in% input$stars_group)) {
vegas <- vegas %>% filter(round(stars) != 4)
}
if (!("5" %in% input$stars_group)) {
vegas <- vegas %>% filter(round(stars) != 5)
}
stars_rounded <- vegas$stars %>%
round()
palette_fn <- colorFactor(palette = "Set1", domain = stars_rounded)
map_of_vegas <- leaflet(data = vegas) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -115.1767, lat = 36.11, zoom = 10.5) %>%
addCircles(
lat = ~ vegas$latitude,
lng = ~ vegas$longitude,
color = ~ palette_fn(stars_rounded),
radius = 20,
fillOpacity = 0.5
) %>%
addLegend(
position = "bottomright",
title = "Star Ratings in Las Vegas",
pal = palette_fn, # the palette to label
values = ~stars_rounded, # the values to label
opacity = 1
)
map_of_vegas
})
}
View(shooting)
proj_server <- function(input, output) {
graph_one <- select(df, neighbourhood_group, room_type)
data <-table(graph_one$neighbourhood_group, graph_one$room_type)
barplot(data, beside=TRUE)
p <- ggplot(data = graph_one, aes(x=neighbourhood_group,
y=room_type,
fill = room_type))
p + geom_bar(stat = "identity")
proj_server <- function(input, output) {
graph_one <- select(df, neighbourhood_group, room_type)
data <-table(graph_one$neighbourhood_group, graph_one$room_type)
barplot(data, beside=TRUE)
p <- ggplot(data = graph_one, aes(x=neighbourhood_group,
y=room_type,
fill = room_type))
p + geom_bar(stat = "identity")
proj_server <- function(input, output) {
graph_one <- select(df, neighbourhood_group, room_type)
data <-table(graph_one$neighbourhood_group, graph_one$room_type)
barplot(data, beside=TRUE)
p <- ggplot(data = graph_one, aes(x=neighbourhood_group,
y=room_type,
fill = room_type))
p + geom_bar(stat = "identity")
proj_server <- function(input, output) {
graph_one <- select(df, neighbourhood_group, room_type)
data <-table(graph_one$neighbourhood_group, graph_one$room_type)
barplot(data, beside=TRUE)
p <- ggplot(data = graph_one, aes(x=neighbourhood_group,
y=room_type,
fill = room_type))
p + geom_bar(stat = "identity")
library("dplyr")
library("plotly")
library("shiny")
source("app_ui.R")
roj_server <- function(input, output) {
graph_one <- select(df, neighbourhood_group, room_type)
data <-table(graph_one$neighbourhood_group, graph_one$room_type)
barplot(data, beside=TRUE)
p <- ggplot(data = graph_one, aes(x=neighbourhood_group,
y=room_type,
fill = room_type))
p + geom_bar(stat = "identity")
}
proj_server <- function(input, output) {
graph_one <- select(df, neighbourhood_group, room_type)
data <-table(graph_one$neighbourhood_group, graph_one$room_type)
barplot(data, beside=TRUE)
p <- ggplot(data = graph_one, aes(x=neighbourhood_group,
y=room_type,
fill = room_type))
p + geom_bar(stat = "identity")
}
graph_one <- select(df, neighbourhood_group, room_type)
data <-table(graph_one$neighbourhood_group, graph_one$room_type)
barplot(data, beside=TRUE)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
graph_one <- select(df, neighbourhood_group, room_type)
data <-table(graph_one$neighbourhood_group, graph_one$room_type)
barplot(data, beside=TRUE)
p <- ggplot(data = graph_one, aes(x=neighbourhood_group,
y=room_type,
fill = room_type))
p + geom_bar(stat = "identity")
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
graph_one <- select(df, neighbourhood_group, room_type)
data <-table(graph_one$neighbourhood_group, graph_one$room_type)
barplot(data, beside=TRUE)
p <- ggplot(data = graph_one, aes(x=neighbourhood_group,
y=room_type,
fill = room_type))
p + geom_bar(stat = "identity")
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
graph_one <- select(df, neighbourhood_group, room_type)
data <-table(graph_one$neighbourhood_group, graph_one$room_type)
barplot(data, beside=TRUE)
p <- ggplot(data = graph_one, aes(x=neighbourhood_group,
y=room_type,
fill = room_type))
p + geom_bar(stat = "identity")
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
graph_one <- select(df, neighbourhood_group, room_type)
data <-table(graph_one$neighbourhood_group, graph_one$room_type)
barplot(data, beside=TRUE)
p <- ggplot(data = graph_one, aes(x=neighbourhood_group,
y=room_type,
fill = room_type))
p + geom_bar(stat = "identity")
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
graph_one <- select(df, neighbourhood_group, room_type)
data <-table(graph_one$neighbourhood_group, graph_one$room_type)
barplot(data, beside=TRUE)
p <- ggplot(data = graph_one, aes(x=neighbourhood_group,
y=room_type,
fill = room_type))
p + geom_bar(stat = "identity")
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
graph_one <- select(df, neighbourhood_group, room_type)
data <-table(graph_one$neighbourhood_group, graph_one$room_type)
barplot(data, beside=TRUE)
p <- ggplot(data = graph_one, aes(x=neighbourhood_group,
y=room_type,
fill = room_type))
p + geom_bar(stat = "identity")
shiny::runApp('info201/coding/Info-201A-Final-project')
shiny::runApp('info201/coding/Info-201A-Final-project')
shiny::runApp('info201/coding/Info-201A-Final-project')
shiny::runApp('info201/coding/Info-201A-Final-project')
shiny::runApp('info201/coding/Info-201A-Final-project')
library("shiny")
library("lintr")
library("dplyr")
library("ggplot2")
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
# Data wrangling space #
# For Map
unique_neighborhood <- unique(df$neighbourhood_group)
unique_type <- unique(df$room_type)
bar_data <- table(df$neighbourhood_group, df$room_type)
rbind(bar_data)
# Shiny User Interface #
proj_ui <- navbarPage(
tabPanel(
"Introduction"
),
tabPanel(
"Comparing Different Room Types in Neighborhood",
sidebarLayout(
sidebarPanel(
selectInput(
"room type",
label = "Choose a type",
choices = unique_neighborhood,
selected = "Private room"
)
),
mainPanel(
plotOutput("bar_plot")
)
),
p("What we can learn from this data:"),
tags$ul(
tags$li("......"),
tags$li(".......")
)
)
)
shiny::runApp('info201/coding/Info-201A-Final-project')
reactive_data = reactive({
selected_type = input$TYPE
return(df[df$room_type==selected_type,])
})
reactive_data = reactive({
selected_type = input$TYPE
return(df[df$room_type==selected_type,])
})
reactive_data = reactive({
selected_type = input$TYPE
return(df[df$room_type==selected_type,])
})
reactive_data = reactive({
selected_type = input$TYPE
return(df[df$room_type==selected_type,])
})
proj_server <- function(input, output) {
reactive_data = reactive({
selected_type = input$TYPE
return(df[df$room_type==selected_type,])
})
output$bar_plot <- renderPlot({
ggplot(data = reactive_data(), aes(x = neighbourhood_group,
y=room_type,
fill = room_type))
p + geom_bar(stat = "identity")
})
}
ggplot(data = reactive_data(), aes(x = neighbourhood_group,
y=room_type,
fill = room_type))
ggplot(data = reactive_data(), aes(x = neighbourhood_group,
y=room_type,
fill = room_type))
shiny::runApp('info201/coding/Info-201A-Final-project')
reactive_data = reactive({
selected_type = input$TYPE
return(df[df$room_type==selected_type,])
})
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
library("shiny")
library("lintr")
library("dplyr")
library("ggplot2")
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
setwd("~/Desktop/info201/coding/Info-201A-Final-project")
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
source('~/Desktop/info201/coding/Info-201A-Final-project/app_ui.R')
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
library(shiny); runApp('info201/coding/Info-201A-Final-project/proj_app.R')
View(df)
img(src = "image/Airbnb_pic.jpg", class = "center"),
setwd("~/Desktop/info201/coding/Info-201A-Final-project")
img(src = "image/Airbnb_pic.jpg", class = "center")
library(shiny); runApp('proj_app.R')
library("dplyr")
library("plotly")
library("shiny")
source("proj_ui.R")
library("tidyr")
library("shiny")
library("plotly")
img(src = "image/airbnb_pic.jpg", class = "center"),
runApp('proj_app.R')
library("shiny")
library("plotly")
intro_page <- tabPanel(
"Introduction of Project",
img(src = "image/airbnb_pic.jpg", class = "center"),
h1(class = "center", "What's Our Goal?"),
h4(class = "center_text", "Our goal for the New York City Airbnb project was
to transform the New York City data set and turn it into visuals for future
Airbnb owners and customers. Through our visualization, we hope to provide
the customers and prospective Airbnb owners some information of the most
popular Airbnb in the region, which could also provides some information
about how the owners should operate their business in terms of selecting
a specific location or selecting a price range, as well as how should customers
select a Airbnb when plan their trips."),
h1(class = "center", "Data set that we use:"),
h4(class = "center_text", "To answer the question, we mainly use the New York
City Airbnb data set, and the additional source including crime data in different
neighborhood from the NYPD complaints data set."),
h3(class = "center", "This project is created by:"),
tags$li(class = "center_text", "Yufei Xia"),
tags$li(class = "center_text", "Klein Wang"),
tags$li(class = "center_text", "Lei Lei"),
tags$li(class = "center_text", "Shawn Song")
)
bar_chart_page <- tabPanel(
"Airbnb Room Type",
titlePanel("Room types of Airbnb in New York City"),
sidebarLayout(
sidebarPanel(
id = "sidebar_bar",
selectInput(
inputId = "neighborhood_choose",
label = "Neighborhood",
choice = c("Brooklyn", "Bronx", "Manhattan", "Queens", "Staten Island")
)
),
mainPanel(
id = "main_bar",
br(),
plotlyOutput("bar_plot"),
br(),
p("This is an interactive bar chart. To be continued.")
)
)
)
# leaflet_page: an interactive leaflet that can show the location of NYC Airbnbs
# and could be modified with different price
leaflet_page <- tabPanel(
"Distribution & price range"
)
conclusion_page <- tabPanel(
"Summary",
titlePanel("Conclusion of project"),
h3("The Relationship Between New york City Airbnb Distribution and Room Type
and How Should Owners Marketing"),
p("<not finished yet, discription of first bar graph>"),
h3("Using Price Range to See Airbnb Distribution"),
p("<not finished yet, description of leaflet>"),
h4("3rd graph information"),
p("<not finished yet>")
)
ui <- navbarPage(
"New York City Airbnb Analysis",
intro_page,
bar_chart_page,
leaflet_page,
conclusion_page
)
library("dplyr")
library("plotly")
library("shiny")
source("proj_ui.R")
library("tidyr")
df <- read.csv("AB_NYC_2019.csv", stringsAsFactors = F)
# The price ranges for Brooklyn
Brooklyn <- df %>%
filter(neighbourhood_group == "Brooklyn") %>%
group_by(room_type) %>%
summarize(num_each_type = n())
filtered_Brooklyn <- na.omit(Brooklyn)
Manhattan <- df %>%
filter(neighbourhood_group == "Manhattan") %>%
group_by(room_type) %>%
summarize(num_each_type = n())
filtered_Manhattan <- na.omit(Manhattan)
Queens <- df %>%
filter(neighbourhood_group == "Queens") %>%
group_by(room_type) %>%
summarize(num_each_type = n())
filtered_Queens <- na.omit(Queens)
Bronx <- df %>%
filter(neighbourhood_group == "Bronx") %>%
group_by(room_type) %>%
summarize(num_each_type = n())
filtered_Bronx <- na.omit(Bronx)
Staten_Island <- df %>%
filter(neighbourhood_group == "Staten Island") %>%
group_by(room_type) %>%
summarize(num_each_type = n())
filtered_Staten_Island <- na.omit(Staten_Island)
# The associated data frames of the room type
type_entire <- data.frame(c(
filtered_Brooklyn$num_each_type[1],
filtered_Queens$num_each_type[1],
filtered_Manhattan$num_each_type[1],
filtered_Bronx$num_each_type[1],
filtered_Staten_Island$num_each_type[1]
))
type_private <- data.frame(c(
filtered_Brooklyn$num_each_type[2],
filtered_Queens$num_each_type[2],
filtered_Manhattan$num_each_type[2],
filtered_Bronx$num_each_type[2],
filtered_Staten_Island$num_each_type[2]
))
type_shared <- data.frame(c(
filtered_Brooklyn$num_each_type[3],
filtered_Queens$num_each_type[3],
filtered_Manhattan$num_each_type[3],
filtered_Bronx$num_each_type[3],
filtered_Staten_Island$num_each_type[3]
))
# The neighborhood and associated room type together in a data frame
neighborhoods <- data.frame(unique(df$neighbourhood_group))
neighborhood_df <- data.frame(neighborhoods,
type_entire, type_private, type_shared)
colnames(neighborhood_df) <- c(
"neighborhood", "Entire house/apt", "Private room", "Shared room"
)
# Server
server <- function(input, output) {
output$bar_plot <- renderPlotly({
# Filters down to a specific neighborhood
one_neighborhood <- neighborhood_df %>%
filter(neighborhood == input$neighborhood_choose)
# not needed as part of the data frame
no_neighborhood <- one_neighborhood %>%
select(-neighborhood)
# Organizes the data frame such that it is race vs pop
type_count <- gather(
no_neighborhood,
key = types,
value = count
)
# chart
one_neighborhood_chart <- plot_ly(
type_count,
x = ~types, y = ~count,
hoverinfo = "text",
text = ~ paste(paste("Room types:", types),
paste("Number of Airbnbs:", count),
sep = "<br />"
)
) %>%
layout(
title = "Number of Airbnbs of each room types",
xaxis = list(title = "Room Type"),
yaxis = list(title = "Number of Airbnb"),
showlegend = FALSE
)
return(one_neighborhood_chart)
})
}
runApp('proj_app.R')
runApp('proj_app.R')
runApp('proj_app.R')
intro_page <- tabPanel(
"Introduction of Project",
img(src = "NYC.png", class = "center"),
h1(class = "center", "What's Our Goal?"),
h4(class = "center_text", "Our goal for the New York City Airbnb project was
to transform the New York City data set and turn it into visuals for future
Airbnb owners and customers. Through our visualization, we hope to provide
the customers and prospective Airbnb owners some information of the most
popular Airbnb in the region, which could also provides some information
about how the owners should operate their business in terms of selecting
a specific location or selecting a price range, as well as how should customers
select a Airbnb when plan their trips."),
h1(class = "center", "Data set that we use:"),
h4(class = "center_text", "To answer the question, we mainly use the New York
City Airbnb data set, and the additional source including crime data in different
neighborhood from the NYPD complaints data set."),
h3(class = "center", "This project is created by:"),
tags$li(class = "center_text", "Yufei Xia"),
tags$li(class = "center_text", "Klein Wang"),
tags$li(class = "center_text", "Lei Lei"),
tags$li(class = "center_text", "Shawn Song")
runApp('proj_app.R')
runApp('proj_app.R')
runApp('proj_app.R')
runApp('proj_app.R')
runApp('proj_app.R')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='lexixia',
token='913CE34B0FC317AAF0D2EC4067967F4F',
secret='<SECRET>')
rsconnect::setAccountInfo(name='lexixia',
token='913CE34B0FC317AAF0D2EC4067967F4F',
secret='<SECRET>')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
library(rsconnect)
rsconnect::deployApp('/Users/xiayufei/desktop/info201/coding/Info-201A-Final-project')
library(rsconnect)
rsconnect::deployApp('/Users/xiayufei/desktop/info201/coding/Info-201A-Final-project')
rsconnect::setAccountInfo(name='lexixia',
token='913CE34B0FC317AAF0D2EC4067967F4F',
secret='<SECRET>')
rsconnect::setAccountInfo(name='lexixia',
token='913CE34B0FC317AAF0D2EC4067967F4F',
secret='WRhOtMeMUjVoN7PYsjGV3RTIxjGNyykcj8xfkXUe')
rsconnect::deployApp('/Users/xiayufei/desktop/info201/coding/Info-201A-Final-project')
# Final project
library("shiny")
# Executes the respective files
source("ui.R")
source("server.R")
# Creates a new shinyApp using the loaded ui and server variables
shinyApp(ui = ui, server = server)
# Final project
library("shiny")
# Executes the respective files
source("ui.R")
source("server.R")
# Creates a new shinyApp using the loaded ui and server variables
shinyApp(ui = ui, server = server)
shiny::runApp()
